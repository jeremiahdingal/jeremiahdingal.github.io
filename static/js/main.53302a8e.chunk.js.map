{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","es","offsetTop","offsetBottom","index_es","globalSceneOptions","triggerHook","pin","reverse","duration","dist_index_es","wrapper","staggerFrom","opacity","ease","stagger","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAmEeA,mLAzDX,OAEEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAWC,UAAW,GAAIC,aAAc,IAAIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAQH,EAAAC,EAAAC,cAAA,qBAErEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYC,mBAAoB,CAAEC,YAAa,YAC9CT,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACSG,KAAK,EACLC,SAAS,EACTC,SAAU,KAEVZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACEC,QACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAEjBY,YAAc,CACXC,QAAS,EACVC,KAAM,kBAERC,QAAS,KAGPlB,EAAAC,EAAAC,cAAA,qBAGZF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACQG,KAAK,EACLC,SAAS,EACTC,SAAU,KAEVZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACEC,QACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAEjBY,YAAc,CACXC,QAAS,EACVC,KAAM,kBAERC,QAAS,KAETlB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,kBAAsCH,EAAAC,EAAAC,cAAA,WAAtC,2BAGVF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOG,KAAG,GACRV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAcH,EAAAC,EAAAC,cAAA,mBAE/BF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOG,KAAG,GACRV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAiBH,EAAAC,EAAAC,cAAA,6BAlD5BiB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.53302a8e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Controller, Scene } from 'react-scrollmagic';\nimport { Tween, Timeline,SplitLetters } from 'react-gsap';\nimport StickyBox from \"react-sticky-box\";\n\n\n\nclass App extends Component {\n  render() {\n    return (\n\n      <div className=\"App\">\n          <StickyBox offsetTop={20} offsetBottom={20}><div className=\"panel\"><span>wew</span></div></StickyBox>\n\n        <div className=\"HeadImg\">\n          <Controller globalSceneOptions={{ triggerHook: 'onLeave' }}>\n           <Scene      \n                    pin={true}\n                    reverse={true}\n                    duration={1000}\n                  >\n                    <Tween \n                      wrapper={\n                        <div className=\"panel blue\" />\n                      }\n                      staggerFrom= {{\n                         opacity: 0,\n                        ease: 'Expo.easeInOut',\n                      }}\n                      stagger={0.15}\n                    >\n                    \n                        <span >Hi.</span>\n                    </Tween>\n            </Scene>\n            <Scene      \n                    pin={true}\n                    reverse={true}\n                    duration={500}\n                  >\n                    <Tween \n                      wrapper={\n                        <div className=\"panel turqoise\" />\n                      }\n                      staggerFrom= {{\n                         opacity: 0,\n                        ease: 'Expo.easeInOut',\n                      }}\n                      stagger={0.15}\n                    >\n                      <span className=\"text\">I am Jeremiah, <br/>and this is my folio.</span>\n                    </Tween>\n            </Scene>\n            <Scene pin>\n              <div className=\"panel green\"><span>3</span></div>\n            </Scene>\n            <Scene pin>\n              <div className=\"panel bordeaux\"><span>4</span></div>\n            </Scene>\n          </Controller>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}