{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","index_es","duration","triggerHook","pin","progress","dist_index_es","totalProgress","paused","from","x","top","to","macOs","chrome","height","width","padding","title","controls","pushFollowers","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sNAoDeA,mLA1CX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAGlBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACCJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOC,SAAU,IAAMC,YAAY,UAAUC,KAAG,GAC/C,SAACC,GAAD,OACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAUC,cAAeF,EAAUG,QAAM,GACzCX,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACIG,KAAM,CAAEC,EAAG,MAAOC,IAAK,OACvBC,GAAI,CAAEF,EAAG,MAAOC,IAAK,QAEnBd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACc,EAAA,OAAD,CACAC,QAAM,EACNC,OAAO,QACPC,MAAM,QACNC,QAAQ,QAENpB,EAAAC,EAAAC,cAACc,EAAA,SAAD,CAAUK,MAAM,YAAYC,UAAQ,EAACJ,OAAO,OAC5ClB,EAAAC,EAAAC,cAACc,EAAA,KAAD,0BAUdhB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOC,SAAU,IAAKE,IAAK,CAAEgB,eAAe,IAC1CvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAASH,EAAAC,EAAAC,cAAA,0BAI5BF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAtCLqB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b0322704.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Window, TitleBar, Text } from 'react-desktop/macOs';\nimport { Controller, Scene } from 'react-scrollmagic';\nimport { Tween, Timeline } from 'react-gsap';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n              \n        </header>\n        <Controller>\n         <Scene duration={2000} triggerHook=\"onLeave\" pin>\n         {(progress) => (\n            <Timeline totalProgress={progress} paused>\n            <Tween\n                from={{ x: '10%', top: '60%' }}\n                to={{ x: '60%', top: '10%' }}\n            >\n                  <div className=\"Win\">\n                      <Window\n                      chrome\n                      height=\"300px\"\n                      width=\"300px\"\n                      padding=\"10px\"\n                      >\n                        <TitleBar title=\"Portfolio\" controls height=\"43\"/>\n                        <Text>Hello World</Text>\n                      </Window>\n                      </div>\n\n            </Tween>  \n            </Timeline>\n\n          )}\n\n          </Scene>\n          <Scene duration={200} pin={{ pushFollowers: false }}>\n            <div className=\"sticky\"><div>Pin Test</div></div>\n            \n          </Scene>\n        </Controller>\n        <div className=\"section\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}